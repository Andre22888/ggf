import asyncio
import json
import os
import re
from datetime import datetime, timedelta

from aiogram.types import WebAppInfo, InputFile, FSInputFile
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, PreCheckoutQuery, LabeledPrice, ChatMember
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from config import TOKEN, ADMIN_ID, amount, REFERAL_BONUS, DISCOUNTED_PRICE, REGULAR_PRICE, BOT_URL

import keyboards as kb

import os

if not os.path.exists('database'):
    os.makedirs('database')

bot = Bot(token=TOKEN)
dp = Dispatcher()

class quest(StatesGroup):
    id = State()
    code = State()

class FeedbackState(StatesGroup):
    waiting_for_feedback = State()
    admin_replying = State()

class AdminActions(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_ban_user_id = State()
    waiting_for_unban_user_id = State()
    waiting_for_give_sub_user_id = State()
    waiting_for_take_sub_user_id = State()

MAIN_MENU_IMAGE = 'https://i.ibb.co/GvbSt5Gx/Picsart-25-08-24-12-18-34-572.jpg'
PROFILE_IMAGE = 'https://i.ibb.co/sd0pt3dx/Picsart-25-08-24-12-19-50-105.jpg'
BUY_IMAGE = 'https://i.ibb.co/PZfWSYj1/Picsart-25-08-24-12-19-03-266.jpg'
HOW_IMAGE = 'https://i.ibb.co/v6K53nFz/Picsart-25-08-24-12-20-54-050.jpg'
FEEDBACK_IMAGE = 'https://i.ibb.co/JWf6BGF7/Picsart-25-08-24-12-42-15-056.jpg'

@dp.update.outer_middleware()
async def ban_middleware(handler, event, data):
    if isinstance(event, Message):
        user_id = event.from_user.id
    elif isinstance(event, CallbackQuery):
        user_id = event.from_user.id
    elif isinstance(event, PreCheckoutQuery):
        user_id = event.from_user.id
    else:
        return await handler(event, data)
    
    if os.path.exists(f'database/{user_id}.json'):
        with open(f'database/{user_id}.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            if data.get('banned', False):
                if isinstance(event, Message):
                    await event.answer("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
                elif isinstance(event, CallbackQuery):
                    await event.answer("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.", show_alert=True)
                return
    
    return await handler(event, data)

@dp.message(CommandStart())
async def start(message: Message, bot: Bot):
    user_id = message.from_user.id
    
    if os.path.exists(f'database/{user_id}.json'):
        with open(f'database/{user_id}.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            if data.get('banned', False):
                await message.answer("‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
                return
    if not os.path.exists('database'):
        os.makedirs('database')

    
    args = message.text.split()
    referrer_id = None
    
    if len(args) > 1:
        if args[1].startswith('ref_'):
            try:
                referrer_id = int(args[1].split('_')[1])
            except:
                pass
    
    if os.path.exists(f'database/{user_id}.json'):
        # print(f'{user_id} —É–∂–µ –≤ –±–∞–∑–µ')
        with open(f"database/{message.from_user.id}.json", "r", encoding="utf-8") as file:
            data = json.load(file)
    else:
        with open(f"database/{user_id}.json", "w+", encoding="utf-8") as file:
            data = {
                "id": user_id, 
                "access": 0, 
                "subscribe": 0,
                "referrals": [],
                "referrer": referrer_id,
                "feedback_messages": [],
                "banned": False,
                "ban_date": None,
                "original_subscription": 0
            }
            json.dump(data, file, indent=4)
        
        if referrer_id and os.path.exists(f'database/{referrer_id}.json'):
            with open(f"database/{referrer_id}.json", "r", encoding="utf-8") as file:
                referrer_data = json.load(file)
            
            if "referrals" not in referrer_data:
                referrer_data["referrals"] = []
            
            if user_id not in referrer_data["referrals"]:
                referrer_data["referrals"].append(user_id)
                
            with open(f"database/{referrer_id}.json", "w", encoding="utf-8") as file:
                json.dump(referrer_data, file, indent=4)
        
    if data["access"] == 1:
        if data["subscribe"] == 1:
            await message.answer_photo(photo=MAIN_MENU_IMAGE,
                                   caption=f'<b>‚ú® –ü—Ä–∏–≤–µ—Ç!</b> \n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è <b>–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º</b>.',
                                   reply_markup=kb.main_access,
                                   parse_mode='HTML'
                                )
            
        else:
            await message.answer_photo(photo=MAIN_MENU_IMAGE,
                                   caption=f'<b>‚ú® –ü—Ä–∏–≤–µ—Ç!</b> \n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø –∫ <b>–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é</b>.',
                                   reply_markup=kb.main,
                                   parse_mode='HTML'
                                )
    else:
        try:
            await message.answer_document(
                document=FSInputFile("ps.docx"),
                caption="–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã –æ–±—è–∑–∞–Ω—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º. "
                       "–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞.",
                reply_markup=kb.accept
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await message.answer(
                "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã –æ–±—è–∑–∞–Ω—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º. "
                "–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞.",
                reply_markup=kb.accept
            )

@dp.callback_query(F.data == 'accept')
async def accept(callback: CallbackQuery):
    user_id = callback.from_user.id
    with open(f"database/{user_id}.json", encoding="utf-8") as file:
        data = json.load(file)
        
    data['access'] = 1
    
    with open(f"database/{user_id}.json", "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)
        
    await callback.message.delete()    
    await callback.message.answer_photo(photo=MAIN_MENU_IMAGE,
                                   caption=f'<b>‚ú® –ü—Ä–∏–≤–µ—Ç!</b> \n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø –∫ <b>–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é</b>.',
                                   reply_markup=kb.main,
                                   parse_mode='HTML'
                                )

@dp.callback_query(F.data == 'cancel')
async def cancel(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")

@dp.callback_query(F.data == 'back')
async def back(callback: CallbackQuery):
    with open(f"database/{callback.from_user.id}.json", "r", encoding="utf-8") as file:
        data = json.load(file)
    
    if data["subscribe"] == 1:
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=MAIN_MENU_IMAGE,
                caption=f'<b>‚ú® –ü—Ä–∏–≤–µ—Ç!</b> \n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è <b>–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º</b>.',
                parse_mode='HTML'
            ),
            reply_markup=kb.main_access
        )
    else:
        await callback.message.edit_media(
            media=types.InputMediaPhoto(
                media=MAIN_MENU_IMAGE,
                caption=f'<b>‚ú® –ü—Ä–∏–≤–µ—Ç!</b> \n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø –∫ <b>–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é</b>.',
                parse_mode='HTML'
            ),
            reply_markup=kb.main
        )
    
@dp.callback_query(F.data == 'buy')
async def buy(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_media(
        media=types.InputMediaPhoto(
            media=BUY_IMAGE,
            caption=f'<b>üíº –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: </b>',
            parse_mode='HTML'
        ),
        reply_markup=kb.buy
    )
    
@dp.callback_query(F.data == 'how')
async def how(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_media(
        media=types.InputMediaPhoto(
            media=HOW_IMAGE,
            caption=f'<b>ü™õ –ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>\n\n–í—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ –∑–≤–µ–∑–¥—ã, –∑–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ—Å—Ç—É–ø –ø–∏—Å–∞—Ç—å –≤ —Ñ–∏–¥–±–µ–∫, —Å–≤—è–∑—ã–≤–∞–µ—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.',
            parse_mode='HTML'
        ),
        reply_markup=kb.back
    )
    
@dp.callback_query(F.data == 'profile')
async def profile(callback: CallbackQuery):
    with open(f"database/{callback.from_user.id}.json", "r", encoding="utf-8") as file:
        data = json.load(file)
    
    if "referrals" not in data:
        data["referrals"] = []
        with open(f"database/{callback.from_user.id}.json", "w", encoding="utf-8") as file:
            json.dump(data, file, indent=4)
    
    if data["subscribe"] == 1:
        access = '–ê–∫—Ç–∏–≤–Ω–∞'
    else:
        access = '–ù–µ –∞–∫—Ç–∏–≤–Ω–∞'
    
    referrals_count = len(data.get("referrals", []))
    referral_link = f"{BOT_URL}?start=ref_{callback.from_user.id}"
    
    if callback.from_user.id == ADMIN_ID:
        role_status = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä /admin"
    else:
        role_status = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
    discount_status = "–¥–∞" if referrals_count >= REFERAL_BONUS else "–Ω–µ—Ç"
    discount_info = f"\n<b>üé´ –°–∫–∏–¥–∫–∞:</b> {discount_status} ({referrals_count}/{REFERAL_BONUS} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)"
        
    await callback.answer()
    await callback.message.edit_media(
        media=types.InputMediaPhoto(
            media=PROFILE_IMAGE,
            caption=f'<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b> @{callback.from_user.username}: \n\n'
                    f'<b>üÜî ID:</b> {callback.from_user.id} \n'
                    f'<b>üí≥ –ü–æ–¥–ø–∏—Å–∫–∞:</b> {access} \n'
                    f'<b>üë• –†–µ—Ñ–µ—Ä–∞–ª—ã:</b> {referrals_count}'
                    f'{discount_info} \n'
                    f'<b>üë§ –†–æ–ª—å:</b> {role_status}\n\n'
                    f'<b>üîó –†–µ—Ñ. —Å—Å—ã–ª–∫–∞:</b> \n<code>{referral_link}</code>',
            parse_mode='HTML'
        ),
        reply_markup=kb.profile_keyboard
    )

@dp.callback_query(F.data == 'ref_link')
async def ref_link(callback: CallbackQuery):
    referral_link = f"{BOT_URL}?start=ref_{callback.from_user.id}"
    await callback.answer()
    await callback.message.answer(
        f"<b>üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<code>{referral_link}</code>\n\n"
        f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏. –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É!",
        parse_mode='HTML'
    )

@dp.callback_query(F.data == 'stars')
async def stars(callback: CallbackQuery):
    with open(f"database/{callback.from_user.id}.json", "r", encoding="utf-8") as file:
        data = json.load(file)

    if "referrals" not in data:
        data["referrals"] = []
        with open(f"database/{callback.from_user.id}.json", "w", encoding="utf-8") as file:
            json.dump(data, file, indent=4)

    referrals_count = len(data.get("referrals", []))
    final_amount = DISCOUNTED_PRICE if referrals_count >= REFERAL_BONUS else REGULAR_PRICE

    price_info = (
        "<b>üí∞ –¶–µ–Ω—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É:</b>\n\n"
        f"<b>üìà –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ü–µ–Ω–∞:</b> ‚≠êÔ∏è{REGULAR_PRICE}\n"
        f"<b>üìâ –¶–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏:</b> ‚≠êÔ∏è{DISCOUNTED_PRICE}\n\n"
        "<i>–ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É –º–æ–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤ 3 —á–µ–ª–æ–≤–µ–∫ –ø–æ —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ</i>"
    )
    await callback.message.answer(price_info, parse_mode="HTML", reply_markup=kb.profile_keyboard)

    prices = [LabeledPrice(label="XTR", amount=final_amount)]
    await callback.answer()
    await callback.message.answer_invoice(
        title="–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é",
        description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é",
        prices=prices,
        provider_token="",
        payload="channel_support",
        currency="XTR",
        reply_markup=kb.stars
    )

@dp.callback_query(F.data == 'feedback')
async def feedback_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_media(
        media=types.InputMediaPhoto(
            media=FEEDBACK_IMAGE,
            caption="üìû –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
        ),
        reply_markup=kb.feedback
    )
    await state.set_state(FeedbackState.waiting_for_feedback)

@dp.message(FeedbackState.waiting_for_feedback)
async def process_feedback(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    with open(f"database/{user_id}.json", "r", encoding="utf-8") as file:
        data = json.load(file)
    
    if "feedback_messages" not in data:
        data["feedback_messages"] = []
    
    data["feedback_messages"].append({
        "text": message.text,
        "message_id": message.message_id
    })
    
    with open(f"database/{user_id}.json", "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4)
    
    await bot.send_message(
        ADMIN_ID,
        f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{message.from_user.username}):\n\n{message.text}",
        reply_markup=kb.admin_reply
    )
    
    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
    await state.clear()

@dp.callback_query(F.data == 'admin_reply')
async def admin_reply_start(callback: CallbackQuery, state: FSMContext):
    message_text = callback.message.text
    user_id_match = re.search(r'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (\d+)', message_text)
    
    if user_id_match:
        user_id = int(user_id_match.group(1))
        await state.update_data(feedback_user_id=user_id)
        await callback.message.answer("üíå –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
        await state.set_state(FeedbackState.admin_replying)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)

@dp.message(FeedbackState.admin_replying)
async def process_admin_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('feedback_user_id')
    
    if user_id:
        try:
            await bot.send_message(user_id, f"üíå –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")
            await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
        except:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    
    await state.clear()

@dp.callback_query(F.data == 'close_ticket')
async def close_ticket(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer("–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç")

# –ü–û–ö–£–ü–ö–ê
@dp.pre_checkout_query()
async def pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)
    
@dp.message(F.successful_payment)
async def progress_successful_payment(message: Message):
    user = message.from_user.first_name
    user_id = message.from_user.id
    
    with open(f"database/{user_id}.json", encoding="utf-8") as file:
        data = json.load(file)
    data['subscribe'] = 1
    
    with open(f"database/{user_id}.json", "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)
    
    await message.answer(
        text='üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π –¥–æ—Å—Ç—É–ø–∞ –∫ <b>–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é</b>. \n\n–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–≤—Å—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –±–æ—Ç–µ).',
        parse_mode='HTML'
    )
    
    await message.answer_photo(photo=MAIN_MENU_IMAGE,
                               caption=f'<b>‚ú® –ü—Ä–∏–≤–µ—Ç!</b> \n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø –∫ <b>–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é</b>.',
                               reply_markup=kb.main_access,
                               parse_mode='HTML'
                            )
    await message.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É"
    )

@dp.message(Command('admin'))
async def admin_panel(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb.admin_keyboard)
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

@dp.callback_query(F.data == 'admin_users')
async def admin_users(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    users_list = "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    subscribed_users = "‚≠êÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π:\n\n"
    banned_users = "üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    
    user_files = [f for f in os.listdir('database') if f.endswith('.json')]
    
    for user_file in user_files:
        user_id = user_file.split('.')[0]
        with open(f"database/{user_file}", "r", encoding="utf-8") as file:
            data = json.load(file)
        
        try:
            user_info = await bot.get_chat(user_id)
            username = f"@{user_info.username}" if user_info.username else "–ù–µ—Ç username"
            full_name = user_info.full_name if user_info.full_name else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        except:
            username = "–ù–µ—Ç username"
            full_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        user_entry = f"ID: {user_id}, –ò–º—è: {full_name}, Username: {username}\n"
        users_list += user_entry
        
        if data.get("subscribe") == 1:
            subscribed_users += user_entry
            
        if data.get("banned", False):
            banned_users += user_entry
    
    await callback.message.answer(users_list)
    await callback.message.answer(subscribed_users)
    await callback.message.answer(banned_users)
    await callback.answer()

@dp.callback_query(F.data == 'admin_give_sub')
async def admin_give_sub(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=kb.cancel_kb)
    await state.set_state(AdminActions.waiting_for_give_sub_user_id)

@dp.callback_query(F.data == 'admin_take_sub')
async def admin_take_sub(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑—ä—è—Ç–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=kb.cancel_kb)
    await state.set_state(AdminActions.waiting_for_take_sub_user_id)

@dp.callback_query(F.data == 'admin_ban')
async def admin_ban(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:", reply_markup=kb.cancel_kb)
    await state.set_state(AdminActions.waiting_for_ban_user_id)

@dp.callback_query(F.data == 'admin_unban')
async def admin_unban(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:", reply_markup=kb.cancel_kb)
    await state.set_state(AdminActions.waiting_for_unban_user_id)

@dp.callback_query(F.data == 'admin_banned_list')
async def admin_banned_list(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    banned_users = "üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    
    user_files = [f for f in os.listdir('database') if f.endswith('.json')]
    
    for user_file in user_files:
        user_id = user_file.split('.')[0]
        with open(f"database/{user_file}", "r", encoding="utf-8") as file:
            data = json.load(file)
        
        if data.get("banned", False):
            try:
                user_info = await bot.get_chat(user_id)
                username = f"@{user_info.username}" if user_info.username else "–ù–µ—Ç username"
                full_name = user_info.full_name if user_info.full_name else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            except:
                username = "–ù–µ—Ç username"
                full_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            ban_date = data.get("ban_date", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            banned_users += f"ID: {user_id}, –ò–º—è: {full_name}, Username: {username}, –î–∞—Ç–∞ –±–∞–Ω–∞: {ban_date}\n"
    
    if banned_users == "üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n":
        banned_users = "üö´ –ù–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    await callback.message.answer(banned_users)
    await callback.answer()

@dp.callback_query(F.data == 'admin_cancel')
async def admin_cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()

@dp.message(AdminActions.waiting_for_give_sub_user_id)
async def process_give_sub(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        
        if not os.path.exists(f'database/{user_id}.json'):
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        with open(f'database/{user_id}.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
        
        data['subscribe'] = 1
        
        with open(f'database/{user_id}.json', 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=4)
        
        try:
            await bot.send_message(user_id, "üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª –≤–∞–º –ø–æ–¥–ø–∏—Å–∫—É!")
        except:
            pass
        
        await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
    
    await state.clear()

@dp.message(AdminActions.waiting_for_take_sub_user_id)
async def process_take_sub(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        
        if not os.path.exists(f'database/{user_id}.json'):
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        with open(f'database/{user_id}.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
        
        data['subscribe'] = 0
        
        with open(f'database/{user_id}.json', 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=4)
        
        try:
            await bot.send_message(user_id, "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑—ä—è–ª –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É!")
        except:
            pass
        
        await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑—ä—è—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
    
    await state.clear()

@dp.message(AdminActions.waiting_for_ban_user_id)
async def process_ban(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        
        if not os.path.exists(f'database/{user_id}.json'):
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        with open(f'database/{user_id}.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
        
        data['original_subscription'] = data.get('subscribe', 0)
        data['subscribe'] = 0
        data['banned'] = True
        data['ban_date'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        with open(f'database/{user_id}.json', 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=4)
        
        try:
            await bot.send_message(user_id, "‚ùå –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        except:
            pass
        
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
    
    await state.clear()

@dp.message(AdminActions.waiting_for_unban_user_id)
async def process_unban(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        
        if not os.path.exists(f'database/{user_id}.json'):
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        with open(f'database/{user_id}.json', 'r', encoding='utf-8') as file:
            data = json.load(file)
        
        data['subscribe'] = data.get('original_subscription', 0)
        data['banned'] = False
        data['ban_date'] = None
        
        with open(f'database/{user_id}.json', 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=4)
        
        try:
            await bot.send_message(user_id, "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        except:
            pass
        
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
    
    await state.clear()

@dp.message(Command('jopa'))
async def admin(message: Message):
    if ADMIN_ID == message.from_user.id:
        async def one(state: FSMContext):
            await state.set_state(quest.id)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID: ")
            
        @dp.message(quest.id)
        async def one_two(message: Message, state: FSMContext):
            await state.update_data(name=message.text) 
            await state.set_state(quest.code)
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: ')
            
        @dp.message(quest.code)
        async def two(message: Message, state: FSMContext):
            data = await state.get_data()
            await state.update_data(name=message.text)
            await bot.send_message(text=f"–í–∞—à –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: <code>{data['code']}</code>",
                                   chat_id=data['id'])
            await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            await state.clear()           
    else:
        await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, id: {message.from_user.id}")
    
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    if not os.path.exists('database'):
        os.makedirs('database')
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')



